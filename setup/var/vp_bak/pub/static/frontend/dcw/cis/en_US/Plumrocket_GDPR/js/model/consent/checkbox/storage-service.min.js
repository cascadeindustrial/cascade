define(['ko','underscore','jquery',],function(ko,_,$){'use strict';var checkboxes={};var checkboxesIdsByLocations={};var listsByLocations={};var sourceUrl=ko.observable('');var storageOptions={};var queue={locationKey:null};var storageService={init:function(){sourceUrl.subscribe(this.loadListFromQueue.bind(this));return this;},setOptions:function(options){if(options.sourceUrl){sourceUrl(options.sourceUrl);}
storageOptions=options;return this;},getList:function(locationKey){this.init();this.loadList(locationKey);return this.getListByLocation(locationKey);},getListByLocation:function(locationKey){if(!listsByLocations.hasOwnProperty(locationKey)){listsByLocations[locationKey]=ko.observableArray([]);}
return listsByLocations[locationKey];},loadList:function(locationKey){if(this.isAllConfigDefined()){if(!checkboxes.hasOwnProperty(locationKey)){$.ajax({url:sourceUrl(),type:'GET',dataType:'json',data:{locationKey:locationKey},success:this.saveCheckboxes.bind(this,locationKey),error:$.proxy(this._onError,this),showLoader:false,dontHide:false,});}}else{queue.locationKey=locationKey;}},loadListFromQueue:function(){if(queue.locationKey&&this.isAllConfigDefined()){this.loadList(queue.locationKey);}},isAllConfigDefined:function(){return Boolean(sourceUrl());},_onError:function(error){if(error.responseJSON){console.warn(JSON.parse(error.responseJSON));}else{if(error.responseText){console.warn(error.responseText);}}},getFromCache:function(checkboxId){return checkboxes[checkboxId];},saveCheckboxes:function(locationKey,items){checkboxesIdsByLocations[locationKey]=[];_.each(items,function(item){checkboxesIdsByLocations[locationKey].push(item.consentId);checkboxes[item.consentId]=item;});listsByLocations[locationKey](checkboxesIdsByLocations[locationKey].map(this.getFromCache.bind(this)));},};storageService.init=_.once(storageService.init);return storageService.init();});